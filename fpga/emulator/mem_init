#!/usr/bin/env python

import sys

class MemInitGen:
    NORMAL = 'NORMAL'
    MODULE = 'MODULE'
    MEM_INIT = 'MEM INIT'

    def __init__(self, module, bin_file):
        self.MODULE_START = 'module ' + module
        self.MODULE_END = 'endmodule'
        self.MEM_INIT_START = '`ifdef RANDOMIZE_MEM_INIT'
        self.MEM_INIT_END = '`endif'
        self.state = MemInitGen.NORMAL
        self.bin_file = bin_file
        self.__found_module = False
        self.__emitted = False

    def transfer(self, line):
        if self.state == MemInitGen.NORMAL:
            if line.startswith(self.MODULE_START):
                self.__found_module = True
                self.state = MemInitGen.MODULE
            print(line)
        elif self.state == MemInitGen.MODULE:
            if line.startswith(self.MEM_INIT_START):
                self.__emitted = True
                self.state = MemInitGen.MEM_INIT
                print('initial $readmemh("' + self.bin_file + '", ram);')
            elif line.startswith(self.MODULE_END):
                self.state = MemInitGen.NORMAL
                print(line)
            else:
                print(line)
        elif self.state == MemInitGen.MEM_INIT:
            if line.startswith(self.MEM_INIT_END):
                self.state = MemInitGen.MODULE

    def found_module():
        return self.__found_module

    def emitted():
        return self.__emitted

if __name__ == '__main__':
    if len(sys.argv) < 4:
        sys.exit(sys.argv[0] + ' <input-file> <module-name> <init-file>')

    mem_init_gen = MemInitGen(sys.argv[2], sys.argv[3])
    for line in open(sys.argv[1]):
        mem_init_gen.transfer(line.strip())

    if not mem_init_gen.found_module:
        sys.exit('Module not found')
    if not mem_init_gen.emitted:
        sys.exit('Memory not initialized')
